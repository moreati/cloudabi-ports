--- Include/pgenheaders.h
+++ Include/pgenheaders.h
@@ -9,8 +9,6 @@
 
 #include "Python.h"
 
-PyAPI_FUNC(void) PySys_WriteStdout(const char *format, ...)
-			Py_GCC_ATTRIBUTE((format(printf, 1, 2)));
 PyAPI_FUNC(void) PySys_WriteStderr(const char *format, ...)
 			Py_GCC_ATTRIBUTE((format(printf, 1, 2)));
 
--- Include/sysmodule.h
+++ Include/sysmodule.h
@@ -18,11 +18,8 @@
 PyAPI_FUNC(void) PySys_SetArgvEx(int, wchar_t **, int);
 PyAPI_FUNC(void) PySys_SetPath(const wchar_t *);
 
-PyAPI_FUNC(void) PySys_WriteStdout(const char *format, ...)
-                 Py_GCC_ATTRIBUTE((format(printf, 1, 2)));
 PyAPI_FUNC(void) PySys_WriteStderr(const char *format, ...)
                  Py_GCC_ATTRIBUTE((format(printf, 1, 2)));
-PyAPI_FUNC(void) PySys_FormatStdout(const char *format, ...);
 PyAPI_FUNC(void) PySys_FormatStderr(const char *format, ...);
 
 PyAPI_FUNC(void) PySys_ResetWarnOptions(void);
--- Parser/acceler.c
+++ Parser/acceler.c
@@ -81,20 +81,17 @@
         label *l = &g->g_ll.ll_label[lbl];
         int type = l->lb_type;
         if (a->a_arrow >= (1 << 7)) {
-            printf("XXX too many states!\n");
             continue;
         }
         if (ISNONTERMINAL(type)) {
             dfa *d1 = PyGrammar_FindDFA(g, type);
             int ibit;
             if (type - NT_OFFSET >= (1 << 7)) {
-                printf("XXX too high nonterminal number!\n");
                 continue;
             }
             for (ibit = 0; ibit < g->g_ll.ll_nlabels; ibit++) {
                 if (testbit(d1->d_first, ibit)) {
                     if (accel[ibit] != -1)
-                        printf("XXX ambiguity!\n");
                     accel[ibit] = a->a_arrow | (1 << 7) |
                         ((type - NT_OFFSET) << 8);
                 }
--- Parser/firstsets.c
+++ Parser/firstsets.c
@@ -10,6 +10,8 @@
 /* Forward */
 static void calcfirstset(grammar *, dfa *);
 
+#define printf(...)
+
 void
 addfirstsets(grammar *g)
 {
--- Parser/grammar.c
+++ Parser/grammar.c
@@ -11,6 +11,8 @@
 
 extern int Py_DebugFlag;
 
+#define printf(...)
+
 grammar *
 newgrammar(int start)
 {
--- Parser/pgenmain.c
+++ Parser/pgenmain.c
@@ -58,8 +58,6 @@
         perror(graminit_c);
         Py_Exit(1);
     }
-    if (Py_DebugFlag)
-        printf("Writing %s ...\n", graminit_c);
     printgrammar(g, fp);
     fclose(fp);
     fp = fopen(graminit_h, "w");
@@ -67,8 +65,6 @@
         perror(graminit_h);
         Py_Exit(1);
     }
-    if (Py_DebugFlag)
-        printf("Writing %s ...\n", graminit_h);
     printnonterminals(g, fp);
     fclose(fp);
     Py_Exit(0);
@@ -116,7 +112,6 @@
     g = pgen(n);
     PyNode_Free(n);
     if (g == NULL) {
-        printf("Bad grammar.\n");
         Py_Exit(1);
     }
     return g;
--- Programs/_testembed.c
+++ Programs/_testembed.c
@@ -7,6 +7,8 @@
  * Executed via 'EmbeddingTests' in Lib/test/test_capi.py
  *********************************************************/
 
+#define printf(...)
+
 static void _testembed_Py_Initialize(void)
 {
     /* HACK: the "./" at front avoids a search along the PATH in
--- Python/sysmodule.c
+++ Python/sysmodule.c
@@ -2214,6 +2214,7 @@
     PyErr_Restore(error_type, error_value, error_traceback);
 }
 
+#if 0
 void
 PySys_WriteStdout(const char *format, ...)
 {
@@ -2223,6 +2224,7 @@
     sys_write(&PyId_stdout, stdout, format, va);
     va_end(va);
 }
+#endif
 
 void
 PySys_WriteStderr(const char *format, ...)
@@ -2256,6 +2258,7 @@
     PyErr_Restore(error_type, error_value, error_traceback);
 }
 
+#if 0
 void
 PySys_FormatStdout(const char *format, ...)
 {
@@ -2265,6 +2268,7 @@
     sys_format(&PyId_stdout, stdout, format, va);
     va_end(va);
 }
+#endif
 
 void
 PySys_FormatStderr(const char *format, ...)
