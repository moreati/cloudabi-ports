--- Include/fileutils.h
+++ Include/fileutils.h
@@ -48,11 +48,8 @@
     struct _Py_stat_struct *status);
 #endif   /* Py_LIMITED_API */
 
-PyAPI_FUNC(int) _Py_stat(
-    PyObject *path,
-    struct stat *status);
 
-#ifndef Py_LIMITED_API
+#if 0
 PyAPI_FUNC(int) _Py_open(
     const char *pathname,
     int flags);
@@ -62,17 +59,8 @@
     int flags);
 #endif
 
-PyAPI_FUNC(FILE *) _Py_wfopen(
-    const wchar_t *path,
-    const wchar_t *mode);
 
-PyAPI_FUNC(FILE*) _Py_fopen(
-    const char *pathname,
-    const char *mode);
 
-PyAPI_FUNC(FILE*) _Py_fopen_obj(
-    PyObject *path,
-    const char *mode);
 
 PyAPI_FUNC(Py_ssize_t) _Py_read(
     int fd,
@@ -103,9 +91,6 @@
     size_t resolved_path_size);
 #endif
 
-PyAPI_FUNC(wchar_t*) _Py_wgetcwd(
-    wchar_t *buf,
-    size_t size);
 
 #ifndef Py_LIMITED_API
 PyAPI_FUNC(int) _Py_get_inheritable(int fd);
--- Include/pyerrors.h
+++ Include/pyerrors.h
@@ -345,14 +345,6 @@
     int lineno,
     int col_offset);
 #endif
-PyAPI_FUNC(PyObject *) PyErr_ProgramText(
-    const char *filename,       /* decoded from the filesystem encoding */
-    int lineno);
-#ifndef Py_LIMITED_API
-PyAPI_FUNC(PyObject *) PyErr_ProgramTextObject(
-    PyObject *filename,
-    int lineno);
-#endif
 
 /* The following functions are used to create and modify unicode
    exceptions from C */
--- Python/errors.c
+++ Python/errors.c
@@ -1108,6 +1108,7 @@
     return NULL;
 }
 
+#if 0
 PyObject *
 PyErr_ProgramText(const char *filename, int lineno)
 {
@@ -1131,6 +1132,7 @@
     }
     return err_programtext(fp, lineno);
 }
+#endif
 
 #ifdef __cplusplus
 }
--- Modules/_io/fileio.c
+++ Modules/_io/fileio.c
@@ -392,7 +392,11 @@
                     self->fd = _wopen(widename, flags, 0666);
                 else
 #endif
+#ifdef HAVE_OPEN
                     self->fd = open(name, flags, 0666);
+#else
+                    self->fd = EMFILE;
+#endif /* HAVE_OPEN */
                 Py_END_ALLOW_THREADS
             } while (self->fd < 0 && errno == EINTR &&
                      !(async_err = PyErr_CheckSignals()));
--- Modules/posixmodule.c
+++ Modules/posixmodule.c
@@ -7777,7 +7777,11 @@
             fd = openat(dir_fd, path->narrow, flags, mode);
         else
 #endif
+#ifdef HAVE_OPEN
             fd = open(path->narrow, flags, mode);
+#else
+            fd = ENFILE;
+#endif /* HAVE_OPEN */
         Py_END_ALLOW_THREADS
     } while (fd < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     _Py_END_SUPPRESS_IPH
--- Python/errors.c
+++ Python/errors.c
@@ -1021,12 +1021,14 @@
         if (_PyObject_SetAttrId(v, &PyId_filename, filename))
             PyErr_Clear();
 
+#ifdef HAVE_OPEN
         tmp = PyErr_ProgramTextObject(filename, lineno);
         if (tmp) {
             if (_PyObject_SetAttrId(v, &PyId_text, tmp))
                 PyErr_Clear();
             Py_DECREF(tmp);
         }
+#endif
     }
     if (_PyObject_SetAttrId(v, &PyId_offset, Py_None)) {
         PyErr_Clear();
--- Python/ast.c
+++ Python/ast.c
@@ -601,7 +601,11 @@
 {
     PyObject *value, *errstr, *loc, *tmp;
 
+#ifdef HAVE_OPEN
     loc = PyErr_ProgramTextObject(c->c_filename, LINENO(n));
+#else
+    loc = NULL;
+#endif
     if (!loc) {
         Py_INCREF(Py_None);
         loc = Py_None;
--- Python/compile.c
+++ Python/compile.c
@@ -4056,7 +4056,11 @@
     PyObject *loc;
     PyObject *u = NULL, *v = NULL;
 
+#ifdef HAVE_OPEN
     loc = PyErr_ProgramTextObject(c->c_filename, c->u->u_lineno);
+#else
+    loc = NULL;
+#endif
     if (!loc) {
         Py_INCREF(Py_None);
         loc = Py_None;
--- Python/fileutils.c
+++ Python/fileutils.c
@@ -39,6 +39,7 @@
 PyObject *
 _Py_device_encoding(int fd)
 {
+#if 0
 #if defined(MS_WINDOWS)
     UINT cp;
 #endif
@@ -67,6 +68,7 @@
             return PyUnicode_FromString(codeset);
     }
 #endif
+#endif
     Py_RETURN_NONE;
 }
 
@@ -704,6 +706,7 @@
    Return 0 on success, -1 on _wstat() / stat() error, -2 if an exception was
    raised. */
 
+#if 0
 int
 _Py_stat(PyObject *path, struct stat *statbuf)
 {
@@ -729,6 +732,7 @@
     return ret;
 #endif
 }
+#endif
 
 
 static int
@@ -925,6 +929,7 @@
     return set_inheritable(fd, inheritable, 1, atomic_flag_works);
 }
 
+#if 0
 static int
 _Py_open_impl(const char *pathname, int flags, int gil_held)
 {
@@ -1143,6 +1148,7 @@
     }
     return f;
 }
+#endif
 
 /* Read count bytes from fd into buf.
 
@@ -1429,6 +1435,7 @@
    including the null character. Decode the path from the locale encoding.
    Return NULL on error. */
 
+#if 0
 wchar_t*
 _Py_wgetcwd(wchar_t *buf, size_t size)
 {
@@ -1454,6 +1461,7 @@
     return buf;
 #endif
 }
+#endif
 
 /* Duplicate a file descriptor. The new file descriptor is created as
    non-inheritable. Return a new file descriptor on success, raise an OSError
--- Python/sysmodule.c
+++ Python/sysmodule.c
@@ -1756,7 +1756,7 @@
     crashing the Python interpreter. Catch this common mistake here
     and output a useful error message. Note that under MS Windows,
     the shell already prevents that. */
-#if !defined(MS_WINDOWS)
+#if !defined(MS_WINDOWS) && !defined(__CloudABI__)
     {
         struct _Py_stat_struct sb;
         if (_Py_fstat_noraise(fileno(stdin), &sb) == 0 &&
