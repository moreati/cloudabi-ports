--- Modules/main.c
+++ Modules/main.c
@@ -503,7 +503,11 @@
         return usage(0, argv[0]);
 
     if (version) {
+#ifdef printf
         printf("Python %s\n", PY_VERSION);
+#else
+        fprintf(stderr, "Python %s\n", PY_VERSION);
+#endif
         return 0;
     }
 
--- Parser/acceler.c
+++ Parser/acceler.c
@@ -81,20 +81,27 @@
         label *l = &g->g_ll.ll_label[lbl];
         int type = l->lb_type;
         if (a->a_arrow >= (1 << 7)) {
+#ifdef printf
             printf("XXX too many states!\n");
+#endif
             continue;
         }
         if (ISNONTERMINAL(type)) {
             dfa *d1 = PyGrammar_FindDFA(g, type);
             int ibit;
             if (type - NT_OFFSET >= (1 << 7)) {
+#ifdef printf
                 printf("XXX too high nonterminal number!\n");
+#endif
                 continue;
             }
             for (ibit = 0; ibit < g->g_ll.ll_nlabels; ibit++) {
                 if (testbit(d1->d_first, ibit)) {
-                    if (accel[ibit] != -1)
+                    if (accel[ibit] != -1) {
+#ifdef printf
                         printf("XXX ambiguity!\n");
+#endif
+                    }
                     accel[ibit] = a->a_arrow | (1 << 7) |
                         ((type - NT_OFFSET) << 8);
                 }
--- Parser/pgenmain.c
+++ Parser/pgenmain.c
@@ -58,8 +58,10 @@
         perror(graminit_c);
         Py_Exit(1);
     }
+#ifdef printf
     if (Py_DebugFlag)
         printf("Writing %s ...\n", graminit_c);
+#endif
     printgrammar(g, fp);
     fclose(fp);
     fp = fopen(graminit_h, "w");
@@ -67,8 +65,10 @@
         perror(graminit_h);
         Py_Exit(1);
     }
+#ifdef printf
     if (Py_DebugFlag)
         printf("Writing %s ...\n", graminit_h);
+#endif
     printnonterminals(g, fp);
     fclose(fp);
     Py_Exit(0);
@@ -116,7 +112,9 @@
     g = pgen(n);
     PyNode_Free(n);
     if (g == NULL) {
+#ifdef printf
         printf("Bad grammar.\n");
+#endif
         Py_Exit(1);
     }
     return g;
