--- Modules/main.c
+++ Modules/main.c
@@ -106,7 +106,7 @@
 static int
 usage(int exitcode, wchar_t* program)
 {
-    FILE *f = exitcode ? stderr : stdout;
+    FILE *f = stderr;
 
     fprintf(f, usage_line, program);
     if (exitcode)
@@ -587,18 +587,15 @@
 #if defined(MS_WINDOWS) || defined(__CYGWIN__)
     /* don't translate newlines (\r\n <=> \n) */
     _setmode(fileno(stdin), O_BINARY);
-    _setmode(fileno(stdout), O_BINARY);
     _setmode(fileno(stderr), O_BINARY);
 #endif
 
     if (Py_UnbufferedStdioFlag) {
 #ifdef HAVE_SETVBUF
         setvbuf(stdin,  (char *)NULL, _IONBF, BUFSIZ);
-        setvbuf(stdout, (char *)NULL, _IONBF, BUFSIZ);
         setvbuf(stderr, (char *)NULL, _IONBF, BUFSIZ);
 #else /* !HAVE_SETVBUF */
         setbuf(stdin,  (char *)NULL);
-        setbuf(stdout, (char *)NULL);
         setbuf(stderr, (char *)NULL);
 #endif /* !HAVE_SETVBUF */
     }
@@ -610,7 +607,6 @@
 #else /* !MS_WINDOWS */
 #ifdef HAVE_SETVBUF
         setvbuf(stdin,  (char *)NULL, _IOLBF, BUFSIZ);
-        setvbuf(stdout, (char *)NULL, _IOLBF, BUFSIZ);
 #endif /* HAVE_SETVBUF */
 #endif /* !MS_WINDOWS */
         /* Leave stderr alone - it should be unbuffered anyway. */
--- Objects/fileobject.c
+++ Objects/fileobject.c
@@ -356,7 +356,7 @@
 {
     PyStdPrinter_Object *self;
 
-    if (fd != fileno(stdout) && fd != fileno(stderr)) {
+    if (fd != fileno(stderr)) {
         /* not enough infrastructure for PyErr_BadInternalCall() */
         return NULL;
     }
--- Parser/listnode.c
+++ Parser/listnode.c
@@ -12,7 +12,7 @@
 void
 PyNode_ListTree(node *n)
 {
-    listnode(stdout, n);
+    listnode(stderr, n);
 }
 
 static int level, atbol;
--- Programs/_testembed.c
+++ Programs/_testembed.c
@@ -27,11 +27,9 @@
     /* Just output some debug stuff */
     PyThreadState *ts = PyThreadState_Get();
     printf("interp %p, thread state %p: ", ts->interp, ts);
-    fflush(stdout);
     PyRun_SimpleString(
         "import sys;"
         "print('id(modules) =', id(sys.modules));"
-        "sys.stdout.flush()"
     );
 }
 
@@ -91,7 +89,6 @@
     } else {
         printf("Expected errors: default\n");
     }
-    fflush(stdout);
     /* Force the given IO encoding */
     Py_SetStandardStreamEncoding(encoding, errors);
     _testembed_Py_Initialize();
@@ -100,7 +97,6 @@
         "print('stdin: {0.encoding}:{0.errors}'.format(sys.stdin));"
         "print('stdout: {0.encoding}:{0.errors}'.format(sys.stdout));"
         "print('stderr: {0.encoding}:{0.errors}'.format(sys.stderr));"
-        "sys.stdout.flush()"
     );
     Py_Finalize();
 }
--- Python/bltinmodule.c
+++ Python/bltinmodule.c
@@ -1867,20 +1867,6 @@
             return NULL;
         tty = fd == fileno(stdin) && isatty(fd);
     }
-    if (tty) {
-        tmp = _PyObject_CallMethodId(fout, &PyId_fileno, "");
-        if (tmp == NULL) {
-            PyErr_Clear();
-            tty = 0;
-        }
-        else {
-            fd = PyLong_AsLong(tmp);
-            Py_DECREF(tmp);
-            if (fd < 0 && PyErr_Occurred())
-                return NULL;
-            tty = fd == fileno(stdout) && isatty(fd);
-        }
-    }
 
     /* If we're interactive, use (GNU) readline */
     if (tty) {
@@ -1938,7 +1924,7 @@
             po = NULL;
             promptstr = "";
         }
-        s = PyOS_Readline(stdin, stdout, promptstr);
+        s = NULL;
         if (s == NULL) {
             PyErr_CheckSignals();
             if (!PyErr_Occurred())
--- Python/frozenmain.c
+++ Python/frozenmain.c
@@ -42,7 +42,6 @@
 
     if (unbuffered) {
         setbuf(stdin, (char *)NULL);
-        setbuf(stdout, (char *)NULL);
         setbuf(stderr, (char *)NULL);
     }
 
--- Python/pylifecycle.c
+++ Python/pylifecycle.c
@@ -1178,7 +1178,7 @@
     Py_DECREF(std);
 
     /* Set sys.stdout */
-    fd = fileno(stdout);
+    fd = fileno(NULL);
     std = create_stdio(iomod, fd, 1, "<stdout>", encoding, errors);
     if (std == NULL)
         goto error;
@@ -1438,7 +1438,6 @@
     while (nexitfuncs > 0)
         (*exitfuncs[--nexitfuncs])();
 
-    fflush(stdout);
     fflush(stderr);
 }
 
--- Python/pythonrun.c
+++ Python/pythonrun.c
@@ -557,7 +557,6 @@
         return;
 
     PyErr_Fetch(&exception, &value, &tb);
-    fflush(stdout);
     if (value == NULL || value == Py_None)
         goto done;
     if (PyExceptionInstance_Check(value)) {
@@ -650,7 +649,6 @@
                 v2 = Py_None;
                 Py_INCREF(v2);
             }
-            fflush(stdout);
             PySys_WriteStderr("Error in sys.excepthook:\n");
             PyErr_Display(exception2, v2, tb2);
             PySys_WriteStderr("\nOriginal exception was:\n");
@@ -687,7 +685,6 @@
     }
 
     Py_INCREF(value);
-    fflush(stdout);
     type = (PyObject *) Py_TYPE(value);
     tb = PyException_GetTraceback(value);
     if (tb && tb != Py_None)
