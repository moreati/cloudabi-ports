--- Modules/main.c
+++ Modules/main.c
@@ -332,7 +332,7 @@
     wchar_t *command = NULL;
     wchar_t *filename = NULL;
     wchar_t *module = NULL;
-    FILE *fp = stdin;
+    FILE *fp = NULL;
     char *p;
 #ifdef MS_WINDOWS
     wchar_t *wp;
@@ -582,7 +582,6 @@
         filename = argv[_PyOS_optind];
     }
 
-    stdin_is_interactive = Py_FdIsInteractive(stdin, (char *)0);
 
 #if defined(MS_WINDOWS) || defined(__CYGWIN__)
     /* don't translate newlines (\r\n <=> \n) */
@@ -592,10 +591,8 @@
 
     if (Py_UnbufferedStdioFlag) {
 #ifdef HAVE_SETVBUF
-        setvbuf(stdin,  (char *)NULL, _IONBF, BUFSIZ);
         setvbuf(stderr, (char *)NULL, _IONBF, BUFSIZ);
 #else /* !HAVE_SETVBUF */
-        setbuf(stdin,  (char *)NULL);
         setbuf(stderr, (char *)NULL);
 #endif /* !HAVE_SETVBUF */
     }
@@ -606,7 +603,6 @@
         setvbuf(stdout, (char *)NULL, _IONBF, BUFSIZ);
 #else /* !MS_WINDOWS */
 #ifdef HAVE_SETVBUF
-        setvbuf(stdin,  (char *)NULL, _IOLBF, BUFSIZ);
 #endif /* HAVE_SETVBUF */
 #endif /* !MS_WINDOWS */
         /* Leave stderr alone - it should be unbuffered anyway. */
@@ -689,16 +685,6 @@
 
     PySys_SetArgv(argc-_PyOS_optind, argv+_PyOS_optind);
 
-    if ((Py_InspectFlag || (command == NULL && filename == NULL && module == NULL)) &&
-        isatty(fileno(stdin))) {
-        PyObject *v;
-        v = PyImport_ImportModule("readline");
-        if (v == NULL)
-            PyErr_Clear();
-        else
-            Py_DECREF(v);
-    }
-
     if (command) {
         sts = run_command(command, &cf);
         PyMem_RawFree(command);
@@ -706,12 +692,6 @@
         sts = (RunModule(module, 1) != 0);
     }
     else {
-
-        if (filename == NULL && stdin_is_interactive) {
-            Py_InspectFlag = 0; /* do exit on SystemExit */
-            RunStartupFile(&cf);
-            RunInteractiveHook();
-        }
         /* XXX */
 
         sts = -1;               /* keep track of whether we've already run __main__ */
@@ -774,14 +754,6 @@
         Py_InspectFlag = 1;
     }
 
-    if (Py_InspectFlag && stdin_is_interactive &&
-        (filename != NULL || command != NULL || module != NULL)) {
-        Py_InspectFlag = 0;
-        RunInteractiveHook();
-        /* XXX */
-        sts = PyRun_AnyFileFlags(stdin, "<stdin>", &cf) != 0;
-    }
-
     Py_Finalize();
 
 #ifdef __INSURE__
--- Python/bltinmodule.c
+++ Python/bltinmodule.c
@@ -1860,13 +1860,6 @@
         PyErr_Clear();
         tty = 0;
     }
-    else {
-        fd = PyLong_AsLong(tmp);
-        Py_DECREF(tmp);
-        if (fd < 0 && PyErr_Occurred())
-            return NULL;
-        tty = fd == fileno(stdin) && isatty(fd);
-    }
 
     /* If we're interactive, use (GNU) readline */
     if (tty) {
--- Python/frozenmain.c
+++ Python/frozenmain.c
@@ -41,7 +41,6 @@
         unbuffered = 1;
 
     if (unbuffered) {
-        setbuf(stdin, (char *)NULL);
         setbuf(stderr, (char *)NULL);
     }
 
@@ -92,9 +91,6 @@
     else
         sts = 0;
 
-    if (inspect && isatty((int)fileno(stdin)))
-        sts = PyRun_AnyFile(stdin, "<stdin>") != 0;
-
 #ifdef MS_WINDOWS
     PyWinFreeze_ExeTerm();
 #endif
--- Python/pylifecycle.c
+++ Python/pylifecycle.c
@@ -1165,7 +1165,7 @@
     }
 
     /* Set sys.stdin */
-    fd = fileno(stdin);
+    fd = fileno(NULL);
     /* Under some conditions stdin, stdout and stderr may not be connected
      * and fileno() may point to an invalid file descriptor. For example
      * GUI apps don't have valid standard streams by default.
--- Python/pythonrun.c
+++ Python/pythonrun.c
@@ -165,7 +165,7 @@
         return -1;
     }
 
-    if (fp == stdin) {
+    if (0) {
         /* Fetch encoding from sys.stdin if possible. */
         v = _PySys_GetObjectId(&PyId_stdin);
         if (v && v != Py_None) {
