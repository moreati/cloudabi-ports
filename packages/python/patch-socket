--- Modules/socketmodule.c
+++ Modules/socketmodule.c
@@ -2442,6 +2442,7 @@
 operations. A timeout of None indicates that timeouts on socket \n\
 operations are disabled.");
 
+#if defined(HAVE_SETSOCKOPT)
 /* s.setsockopt() method.
    With an integer third argument, sets an integer option.
    With a string third argument, sets an option from a buffer;
@@ -2493,6 +2494,7 @@
 \n\
 Set a socket option.  See the Unix manual for level and option.\n\
 The value argument can either be an integer or a string.");
+#endif /* defined(HAVE_SETSOCKOPT) */
 
 
 /* s.getsockopt() method.
@@ -2548,6 +2550,7 @@
 string of that length; otherwise it is an integer.");
 
 
+#if defined(HAVE_BIND)
 /* s.bind(sockaddr) method */
 
 static PyObject *
@@ -2574,6 +2577,7 @@
 Bind the socket to a local address.  For IP sockets, the address is a\n\
 pair (host, port); the host must refer to the local host. For raw packet\n\
 sockets the address is a tuple (ifname, proto [,pkttype [,hatype]])");
+#endif /* defined(HAVE_BIND) */
 
 
 /* s.close() method.
@@ -2625,6 +2629,7 @@
 The object cannot be used after this call, but the file descriptor\n\
 can be reused for other purposes.  The file descriptor is returned.");
 
+#if defined(HAVE_CONNECT)
 static int
 sock_connect_impl(PySocketSockObject *s, void* Py_UNUSED(data))
 {
@@ -2762,6 +2767,7 @@
 \n\
 This is like connect(address), but returns an error code (the errno value)\n\
 instead of raising an exception when an error occurs.");
+#endif /* defined(HAVE_CONNECT) */
 
 
 /* s.fileno() method */
@@ -3684,6 +3690,7 @@
 to tell how much data has been sent.");
 
 
+#if defined(MS_WINDOWS) || defined(HAVE_SENDTO)
 struct sock_sendto {
     char *buf;
     Py_ssize_t len;
@@ -3770,6 +3777,7 @@
 \n\
 Like send(data, flags) but allows specifying the destination address.\n\
 For IP sockets, the address is a pair (hostaddr, port).");
+#endif /* defined(MS_WINDOWS) || defined(HAVE_SENDTO) */
 
 
 /* The sendmsg() and recvmsg[_into]() methods require a working
@@ -4108,14 +4116,18 @@
 static PyMethodDef sock_methods[] = {
     {"_accept",           (PyCFunction)sock_accept, METH_NOARGS,
                       accept_doc},
+#if defined(HAVE_BIND)
     {"bind",              (PyCFunction)sock_bind, METH_O,
                       bind_doc},
+#endif
     {"close",             (PyCFunction)sock_close, METH_NOARGS,
                       close_doc},
+#if defined(HAVE_CONNECT)
     {"connect",           (PyCFunction)sock_connect, METH_O,
                       connect_doc},
     {"connect_ex",        (PyCFunction)sock_connect_ex, METH_O,
                       connect_ex_doc},
+#endif
     {"detach",            (PyCFunction)sock_detach, METH_NOARGS,
                       detach_doc},
     {"fileno",            (PyCFunction)sock_fileno, METH_NOARGS,
@@ -4150,16 +4162,20 @@
                       send_doc},
     {"sendall",           (PyCFunction)sock_sendall, METH_VARARGS,
                       sendall_doc},
+#if defined(MS_WINDOWS) || defined(HAVE_SENDTO)
     {"sendto",            (PyCFunction)sock_sendto, METH_VARARGS,
                       sendto_doc},
+#endif
     {"setblocking",       (PyCFunction)sock_setblocking, METH_O,
                       setblocking_doc},
     {"settimeout",    (PyCFunction)sock_settimeout, METH_O,
                       settimeout_doc},
     {"gettimeout",    (PyCFunction)sock_gettimeout, METH_NOARGS,
                       gettimeout_doc},
+#if defined(HAVE_SETSOCKOPT)
     {"setsockopt",        (PyCFunction)sock_setsockopt, METH_VARARGS,
                       setsockopt_doc},
+#endif
     {"shutdown",          (PyCFunction)sock_shutdown, METH_O,
                       shutdown_doc},
 #ifdef CMSG_LEN
@@ -4478,6 +4494,7 @@
 };
 
 
+#if defined(MS_WINDOWS) || defined(HAVE_GETHOSTNAME)
 /* Python interface to gethostname(). */
 
 /*ARGSUSED*/
@@ -4537,6 +4554,7 @@
 "gethostname() -> string\n\
 \n\
 Return the current host name.");
+#endif /* defined(MS_WINDOWS) || defined(HAVE_GETHOSTNAME) */
 
 #ifdef HAVE_SETHOSTNAME
 PyDoc_STRVAR(sethostname_doc,
@@ -4575,6 +4593,7 @@
 }
 #endif
 
+#if defined(HAVE_GETHOSTBYNAME)
 /* Python interface to gethostbyname(name). */
 
 /*ARGSUSED*/
@@ -4599,6 +4618,7 @@
 "gethostbyname(host) -> address\n\
 \n\
 Return the IP address (a string of the form '255.255.255.255') for a host.");
+#endif /* defined(HAVE_GETHOSTBYNAME) */
 
 
 static PyObject*
@@ -4614,6 +4634,7 @@
 #endif
 }
 
+#if defined(HAVE_GETHOSTBYNAME) || defined(HAVE_GETHOSTBYADDR)
 /* Convenience function common to gethostbyname_ex and gethostbyaddr */
 
 static PyObject *
@@ -4743,8 +4764,10 @@
     Py_XDECREF(addr_list);
     return rtn_tuple;
 }
+#endif /* defined(HAVE_GETHOSTBYNAME) || defined(HAVE_GETHOSTBYADDR) */
 
 
+#if defined(HAVE_GETHOSTBYNAME)
 /* Python interface to gethostbyname_ex(name). */
 
 /*ARGSUSED*/
@@ -4813,8 +4836,10 @@
 \n\
 Return the true host name, a list of aliases, and a list of IP addresses,\n\
 for a host.  The host argument is a string giving a host name or IP number.");
+#endif /* defined(HAVE_GETHOSTBYNAME) */
 
 
+#if defined(HAVE_GETHOSTBYADDR)
 /* Python interface to gethostbyaddr(IP). */
 
 /*ARGSUSED*/
@@ -4905,6 +4930,7 @@
 \n\
 Return the true host name, a list of aliases, and a list of IP addresses,\n\
 for a host.  The host argument is a string giving a host name or IP number.");
+#endif /* defined(HAVE_GETHOSTBYADDR) */
 
 
 /* Python interface to getservbyname(name).
@@ -5257,6 +5283,7 @@
 \n\
 Convert a 32-bit integer from host to network byte order.");
 
+#if defined(HAVE_INET_ATON) || defined(HAVE_INET_ADDR)
 /* socket.inet_aton() and socket.inet_ntoa() functions. */
 
 PyDoc_STRVAR(inet_aton_doc,
@@ -5329,7 +5356,9 @@
 
 #endif
 }
+#endif /* defined(HAVE_INET_ATON) || defined(HAVE_INET_ADDR) */
 
+#if defined(HAVE_INET_NTOA)
 PyDoc_STRVAR(inet_ntoa_doc,
 "inet_ntoa(packed_ip) -> ip_address_string\n\
 \n\
@@ -5357,6 +5386,7 @@
 
     return PyUnicode_FromString(inet_ntoa(packed_addr));
 }
+#endif /* defined(HAVE_INET_NTOA) */
 
 #if defined(HAVE_INET_PTON) || defined(MS_WINDOWS)
 
@@ -6004,14 +6034,20 @@
 /* List of functions exported by this module. */
 
 static PyMethodDef socket_methods[] = {
+#ifdef HAVE_GETHOSTBYNAME
     {"gethostbyname",           socket_gethostbyname,
      METH_VARARGS, gethostbyname_doc},
     {"gethostbyname_ex",        socket_gethostbyname_ex,
      METH_VARARGS, ghbn_ex_doc},
+#endif
+#ifdef GETHOSTBYADDR
     {"gethostbyaddr",           socket_gethostbyaddr,
      METH_VARARGS, gethostbyaddr_doc},
+#endif
+#if defined(MS_WINDOWS) || defined(HAVE_GETHOSTNAME)
     {"gethostname",             socket_gethostname,
      METH_NOARGS,  gethostname_doc},
+#endif
 #ifdef HAVE_SETHOSTNAME
     {"sethostname",             socket_sethostname,
      METH_VARARGS,  sethostname_doc},
@@ -6038,10 +6074,14 @@
      METH_VARARGS, htons_doc},
     {"htonl",                   socket_htonl,
      METH_O, htonl_doc},
+#if defined(HAVE_INET_ATON) || defined(HAVE_INET_ADDR)
     {"inet_aton",               socket_inet_aton,
      METH_VARARGS, inet_aton_doc},
+#endif
+#if defined(HAVE_INET_NTOA)
     {"inet_ntoa",               socket_inet_ntoa,
      METH_VARARGS, inet_ntoa_doc},
+#endif
 #if defined(HAVE_INET_PTON) || defined(MS_WINDOWS)
     {"inet_pton",               socket_inet_pton,
      METH_VARARGS, inet_pton_doc},
