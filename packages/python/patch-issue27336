diff --git a/Parser/pgenmain.c b/Parser/pgenmain.c
--- a/Parser/pgenmain.c
+++ b/Parser/pgenmain.c
@@ -33,22 +33,23 @@ void Py_Exit(int) _Py_NO_RETURN;
 
 void
 Py_Exit(int sts)
 {
     exit(sts);
 }
 
 #ifdef WITH_THREAD
-/* Functions needed by obmalloc.c */
+/* Needed by obmalloc.c */
 int PyGILState_Check(void)
 { return 1; }
+#endif
+
 void _PyMem_DumpTraceback(int fd, const void *ptr)
 {}
-#endif
 
 int
 main(int argc, char **argv)
 {
     grammar *g;
     FILE *fp;
     char *filename, *graminit_h, *graminit_c;
 
diff --git a/Python/pylifecycle.c b/Python/pylifecycle.c
--- a/Python/pylifecycle.c
+++ b/Python/pylifecycle.c
@@ -743,17 +743,19 @@ Py_NewInterpreter(void)
     PyThreadState *tstate, *save_tstate;
     PyObject *bimod, *sysmod;
 
     if (!initialized)
         Py_FatalError("Py_NewInterpreter: call Py_Initialize first");
 
     /* Issue #10915, #15751: The GIL API doesn't work with multiple
        interpreters: disable PyGILState_Check(). */
+#if WITH_THREAD
     _PyGILState_check_enabled = 0;
+#endif
 
     interp = PyInterpreterState_New();
     if (interp == NULL)
         return NULL;
 
     tstate = PyThreadState_New(interp);
     if (tstate == NULL) {
         PyInterpreterState_Delete(interp);
diff --git a/Python/traceback.c b/Python/traceback.c
--- a/Python/traceback.c
+++ b/Python/traceback.c
@@ -740,17 +740,17 @@ const char*
         else {
             interp = current_tstate->interp;
         }
     }
 #else
     if (current_tstate == NULL) {
         /* Call _PyThreadState_UncheckedGet() instead of PyThreadState_Get()
            to not fail with a fatal error if the thread state is NULL. */
-        current_thread = _PyThreadState_UncheckedGet();
+        current_tstate = _PyThreadState_UncheckedGet();
     }
 
     if (interp == NULL) {
         if (current_tstate == NULL) {
             /* We need the interpreter state to get Python threads */
             return "unable to get the interpreter state";
         }
         interp = current_tstate->interp;
